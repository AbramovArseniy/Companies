// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_node.sql

package db

import (
	"context"
	"database/sql"
)

const getOneNode = `-- name: GetOneNode :one
SELECT nodes.id, nodes.name, nodes.parent_id, info.address, info.phone_number, info.contant_person FROM nodes LEFT JOIN info ON nodes.id = info.node_id WHERE id=$1
`

type GetOneNodeRow struct {
	ID            sql.NullInt32  `json:"id"`
	Name          string         `json:"name"`
	ParentID      sql.NullInt32  `json:"parent_id"`
	Address       sql.NullString `json:"address"`
	PhoneNumber   sql.NullString `json:"phone_number"`
	ContantPerson sql.NullString `json:"contant_person"`
}

func (q *Queries) GetOneNode(ctx context.Context, id sql.NullInt32) (GetOneNodeRow, error) {
	row := q.db.QueryRowContext(ctx, getOneNode, id)
	var i GetOneNodeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentID,
		&i.Address,
		&i.PhoneNumber,
		&i.ContantPerson,
	)
	return i, err
}
