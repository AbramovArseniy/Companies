// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_tree.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllTree = `-- name: GetAllTree :many
SELECT nodes.id, nodes.name, nodes.parent_id, info.address, info.phone_number, info.contact_person FROM nodes LEFT JOIN info ON nodes.id = info.node_id
`

type GetAllTreeRow struct {
	ID            int32       `json:"id"`
	Name          string      `json:"name"`
	ParentID      pgtype.Int4 `json:"parent_id"`
	Address       pgtype.Text `json:"address"`
	PhoneNumber   pgtype.Text `json:"phone_number"`
	ContactPerson pgtype.Text `json:"contact_person"`
}

func (q *Queries) GetAllTree(ctx context.Context) ([]GetAllTreeRow, error) {
	rows, err := q.db.Query(ctx, getAllTree)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllTreeRow{}
	for rows.Next() {
		var i GetAllTreeRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentID,
			&i.Address,
			&i.PhoneNumber,
			&i.ContactPerson,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
