// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: proto/demo.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CompaniesService_GetTree_FullMethodName      = "/demo.CompaniesService/GetTree"
	CompaniesService_GetHierarchy_FullMethodName = "/demo.CompaniesService/GetHierarchy"
	CompaniesService_GetNode_FullMethodName      = "/demo.CompaniesService/GetNode"
)

// CompaniesServiceClient is the client API for CompaniesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompaniesServiceClient interface {
	GetTree(ctx context.Context, in *GetTreeRequest, opts ...grpc.CallOption) (*GetTreeResponse, error)
	GetHierarchy(ctx context.Context, in *GetHierarchyRequest, opts ...grpc.CallOption) (*GetHierarchyResponse, error)
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
}

type companiesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompaniesServiceClient(cc grpc.ClientConnInterface) CompaniesServiceClient {
	return &companiesServiceClient{cc}
}

func (c *companiesServiceClient) GetTree(ctx context.Context, in *GetTreeRequest, opts ...grpc.CallOption) (*GetTreeResponse, error) {
	out := new(GetTreeResponse)
	err := c.cc.Invoke(ctx, CompaniesService_GetTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companiesServiceClient) GetHierarchy(ctx context.Context, in *GetHierarchyRequest, opts ...grpc.CallOption) (*GetHierarchyResponse, error) {
	out := new(GetHierarchyResponse)
	err := c.cc.Invoke(ctx, CompaniesService_GetHierarchy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companiesServiceClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, CompaniesService_GetNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompaniesServiceServer is the server API for CompaniesService service.
// All implementations must embed UnimplementedCompaniesServiceServer
// for forward compatibility
type CompaniesServiceServer interface {
	GetTree(context.Context, *GetTreeRequest) (*GetTreeResponse, error)
	GetHierarchy(context.Context, *GetHierarchyRequest) (*GetHierarchyResponse, error)
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	mustEmbedUnimplementedCompaniesServiceServer()
}

// UnimplementedCompaniesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompaniesServiceServer struct {
}

func (UnimplementedCompaniesServiceServer) GetTree(context.Context, *GetTreeRequest) (*GetTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTree not implemented")
}
func (UnimplementedCompaniesServiceServer) GetHierarchy(context.Context, *GetHierarchyRequest) (*GetHierarchyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHierarchy not implemented")
}
func (UnimplementedCompaniesServiceServer) GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedCompaniesServiceServer) mustEmbedUnimplementedCompaniesServiceServer() {}

// UnsafeCompaniesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompaniesServiceServer will
// result in compilation errors.
type UnsafeCompaniesServiceServer interface {
	mustEmbedUnimplementedCompaniesServiceServer()
}

func RegisterCompaniesServiceServer(s grpc.ServiceRegistrar, srv CompaniesServiceServer) {
	s.RegisterService(&CompaniesService_ServiceDesc, srv)
}

func _CompaniesService_GetTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompaniesServiceServer).GetTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompaniesService_GetTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompaniesServiceServer).GetTree(ctx, req.(*GetTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompaniesService_GetHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHierarchyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompaniesServiceServer).GetHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompaniesService_GetHierarchy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompaniesServiceServer).GetHierarchy(ctx, req.(*GetHierarchyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompaniesService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompaniesServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompaniesService_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompaniesServiceServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompaniesService_ServiceDesc is the grpc.ServiceDesc for CompaniesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompaniesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.CompaniesService",
	HandlerType: (*CompaniesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTree",
			Handler:    _CompaniesService_GetTree_Handler,
		},
		{
			MethodName: "GetHierarchy",
			Handler:    _CompaniesService_GetHierarchy_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _CompaniesService_GetNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/demo.proto",
}
